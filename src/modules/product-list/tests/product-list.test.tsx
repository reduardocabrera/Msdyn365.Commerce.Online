/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import {
    buildMockActionContext,
    //buildMockModuleProps,
    buildMockRequest,
    //buildMockTelemetry,
    //IProductList,
    IRequestContext
} from '@msdyn365-commerce/core';
import { /*FeatureState,*/ ProductSearchResult } from '@msdyn365-commerce/retail-proxy';
//import { mount } from 'enzyme';

//import * as React from 'react';
/*import {
    IProductListConfig,
    IProductListProps,
    IHeadingData
    //IProductListResources
    //IProductListViewProps,
    //ProductListModule
} from '../product-list.props.autogenerated';*/
//import { IProductListData } from '../product-list.data';

//import * as renderer from 'react-test-renderer';

//import ProductList from '../product-list';
//import { IProductListConfig, IProductListProps } from '../product-list.props.autogenerated';

const mockProduct: ProductSearchResult = {
    RecordId: 22565429819,
    ItemId: '81120',
    Name: 'Cotton Polo',
    Description:
        'Casual shirts are made for the \u201Cgood times\u201D.  Our custom fitting shirts are relaxed enough to be comfortable without looking baggy.',
    BasePrice: 59.99,
    Price: 59.99,
    TotalRatings: 182,
    AverageRating: 3.71428571428571,
    PrimaryImageUrl:
        'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/Products%2F91032_000_001.png'
};
/*const mockData: IProductListData = {
    // @ts-expect-error-
    featureState: {
        status: 'SUCCESS',
        result: [{ Name: 'Dynamics.AX.Application.RetailSearchPriceRangeFeature', IsEnabled: true }]
    } as FeatureState[]
};*/

const mockProductCollection: ProductSearchResult[] = [];
mockProductCollection.push(mockProduct);

/*const mockProductList: IProductList = {
    products: mockProductCollection,
    listMetadata: {},
    listType: '',
    recommendationListId: ''
};*/

/*const mockProductListWithRecomm: IProductList = {
    products: [mockProduct],
    listMetadata: 'Trending',
    listType: 'Trending',
    recommendationListId: 'Trending'
};*/

/*const mockEmptyProduct: IProductList = {
    // @ts-ignore -- Test a particular scenario.
    products: undefined,
    listMetadata: 'Trending',
    listType: 'Trending',
    recommendationListId: 'Trending'
};*/

/*const mockResources: IProductListResources = {
    priceFree: 'Free',
    priceRangeSeparator: ' - ',
    originalPriceText: 'Original price',
    currentPriceText: 'Current price',
    ratingAriaLabel: 'average rating',
    flipperNext: 'next',
    flipperPrevious: 'previous',
    ratingCountAriaLabel: 'rating count',
    ratingCountAriaLabelSingleUser: 'single rating',
    seeAllButtonText: 'See All',
    noProductToRenderText: 'No promotional products available.'
};*/

const mockRequest: IRequestContext = buildMockRequest();

// @ts-expect-error
const mockContext: ICoreContext = {
    request: mockRequest,
    actionContext: buildMockActionContext(),
    app: {
        config: {
            breadcrumbType: 'categoryAndBack',
            dimensionsInProductCard: ['color', 'size'],
            hideRating: false,
            dimensionsAsSwatchType: ['color', 'size']
        }
    },

    cultureFormatter: {
        formatCurrency: jest.fn(price => `$${price}`)
    }
};

/*const mockConfigs: IProductListConfig = {
    productCollection: mockProductList,
    shouldDisplaySeeAllButton: true,
    heading: {
        text: 'Account Credit',
        tag: 'h2'
    } as IHeadingData
};*/

/*const mockConfigs1: IProductListConfig = {
    productCollection: mockProductListWithRecomm,
    shouldDisplaySeeAllButton: true,
    heading: {
        text: 'Account Credit',
        tag: 'h2'
    } as IHeadingData,
    allowBackNavigation: true
};*/

/*const mockConfigs2: IProductListConfig = {
    productCollection: mockEmptyProduct,
    shouldDisplaySeeAllButton: true,
    heading: {
        text: 'Account Credit',
        tag: 'h2'
    } as IHeadingData
};*/

/*const mockSlots = {
    quickview: [],
    productComparisonButton: []
};*/

/*const mockSlotsWithSlots = {
    quickview: [<div key='quickview' />],
    productComparisonButton: [<div key='productComparisonButton' />]
};*/

describe('Product collection Module tests', () => {
    //let moduleProps: IProductListProps<IProductListData>;
    //const telemetry = buildMockTelemetry();
    /*it('Renders as expected when empty array of products are passed', () => {
        moduleProps = {
            ...(buildMockModuleProps(mockData, {}, mockConfigs2, mockContext) as IProductListProps<IProductListData>),
            resources: mockResources,
            slots: mockSlots,

            renderView: jest.fn(props => {
                // @ts-expect-error
                return <div props={props} />;
            })
        };

        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Mock context.
        moduleProps.context = mockContext;
        moduleProps.telemetry = telemetry;
        const result = mount(<ProductListModule {...moduleProps} />);

        expect(moduleProps.renderView).toHaveBeenCalled();
        result.setState({ products: mockProductCollection });
        result.update();

        const viewProps: IProductListViewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();

        expect(viewProps.products).not.toBeTruthy();
        result.unmount();
    });*/
    /*it('Renders as expected when no product defined', () => {
        moduleProps = {
            ...(buildMockModuleProps({}, mockConfigs, mockContext) as IProductListProps<IProductListData>),
            resources: mockResources,
            slots: mockSlots,

            renderView: jest.fn(props => {
                // @ts-expect-error
                return <div props={props} />;
            })
        };

        moduleProps.config.productCollection = {
            products: [],
            listMetadata: {},
            listType: '',
            recommendationListId: ''
        };

        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Mock context.
        moduleProps.context = mockContext;
        moduleProps.telemetry = telemetry;
        const result = mount(<ProductListModule {...moduleProps} />);
        expect(moduleProps.renderView).toHaveBeenCalled();

        const viewProps: IProductListViewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();

        expect(viewProps.heading).not.toBeTruthy();
        expect(viewProps.products).not.toBeTruthy();
        result.unmount();
    });*/
    /*it('Renders as expected when product is defined', () => {
        moduleProps = {
            ...(buildMockModuleProps(mockData, {}, mockConfigs1, mockContext) as IProductListProps<IProductListData>),
            resources: mockResources,
            slots: mockSlots,

            renderView: jest.fn(props => {
                // @ts-expect-error
                return <div props={props} />;
            })
        };

        moduleProps.config.productCollection = {
            products: [mockProduct],
            listMetadata: { test },
            listType: 'Test',
            recommendationListId: 'Test'
        };

        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Mock context.
        moduleProps.context = mockContext;
        moduleProps.telemetry = telemetry;
        const result = mount(<ProductListModule {...moduleProps} />);

        expect(moduleProps.renderView).toHaveBeenCalled();

        const viewProps: IProductListViewProps = result.childAt(0).props().props;

        expect(viewProps).toBeDefined();

        expect(viewProps.heading).toBeTruthy();
        expect(viewProps.products).toBeTruthy();
        result.unmount();
    });*/
    /*it('handle textChange event', () => {
        moduleProps = {
            ...(buildMockModuleProps(mockData, {}, mockConfigs1, mockContext) as IProductListProps<IProductListData>),
            resources: mockResources,
            slots: mockSlotsWithSlots,

            renderView: jest.fn(props => {
                // @ts-expect-error
                return <div props={props} />;
            })
        };
        const component = mount(<ProductListModule {...moduleProps} />);
        expect(component).toMatchSnapshot();
        const productCollectionModuleInstance = component.instance();
        const event = { currentTarget: { value: 'foo1' }, target: { value: 'foo' } };

        // @ts-expect-error ignore private method
        productCollectionModuleInstance.handleHeadingChange(event);
    });*/
});
